package guiStuff;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

import main.SimulationMain;
import shapes3D.Geometry3D;
import shapes3D.SpaceObject;

public class RightSideGUI extends javax.swing.JPanel {

	private ArrayList<Geometry3D> spaceObjects;
	private SimulationMain sim;

	/**
	 * Creates new form RightSide
	 */
	public RightSideGUI(SimulationMain sim) {
		this.sim = sim;
		initComponents();
	}

	public void attachSimulationObjects(ArrayList<Geometry3D> items) {
		spaceObjects = items;

		for (Geometry3D s : spaceObjects) {
			if (s instanceof SpaceObject) {
				choice1.add(((SpaceObject) s).getName());
			} else {
				choice1.add("LockPoint");
			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;
		this.setFocusable(false);
		jLabel1 = new javax.swing.JLabel();
		scaleY = new javax.swing.JTextField();
		scaleX = new javax.swing.JTextField();
		scaleZ = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		rotX = new javax.swing.JTextField();
		rotY = new javax.swing.JTextField();
		rotZ = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		tickX = new javax.swing.JTextField();
		tickY = new javax.swing.JTextField();
		tickZ = new javax.swing.JTextField();
		choice1 = new java.awt.Choice();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		positionText = new javax.swing.JLabel();
		positionText.setFocusable(false);
		velocityText = new javax.swing.JLabel();
		velocityText.setFocusable(false);

		java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
		layout.columnWidths = new int[] { 0, 5, 0, 5, 0 };
		layout.rowHeights = new int[] { 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0,
				5, 0 };
		setLayout(layout);

		jLabel1.setText("Scale");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		add(jLabel1, gridBagConstraints);

		scaleY.setText("jTextField4");
		scaleY.setPreferredSize(new java.awt.Dimension(80, 19));
		scaleY.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				scaleYActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(scaleY, gridBagConstraints);

		scaleX.setText("jTextField4");
		scaleX.setPreferredSize(new java.awt.Dimension(80, 19));
		scaleX.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				scaleXActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(scaleX, gridBagConstraints);

		scaleZ.setText("jTextField6");
		scaleZ.setPreferredSize(new java.awt.Dimension(80, 19));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(scaleZ, gridBagConstraints);

		jLabel2.setText("Rotation Point");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 16;
		add(jLabel2, gridBagConstraints);

		rotX.setText("jTextField7");
		rotX.setPreferredSize(new java.awt.Dimension(80, 19));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 18;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(rotX, gridBagConstraints);

		rotY.setText("jTextField8");
		rotY.setPreferredSize(new java.awt.Dimension(80, 19));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 18;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(rotY, gridBagConstraints);

		rotZ.setText("jTextField9");
		rotZ.setPreferredSize(new java.awt.Dimension(80, 19));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 18;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(rotZ, gridBagConstraints);

		jLabel3.setText("# of Ticks");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 6;
		add(jLabel3, gridBagConstraints);

		tickX.setText("jTextField7");
		tickX.setPreferredSize(new java.awt.Dimension(80, 19));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 8;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(tickX, gridBagConstraints);

		tickY.setText("jTextField8");
		tickY.setPreferredSize(new java.awt.Dimension(80, 19));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 8;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(tickY, gridBagConstraints);

		tickZ.setText("jTextField9");
		tickZ.setPreferredSize(new java.awt.Dimension(80, 19));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 8;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(tickZ, gridBagConstraints);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 14;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(choice1, gridBagConstraints);

		jLabel4.setText("Object Selection:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 12;
		add(jLabel4, gridBagConstraints);

		jLabel5.setText("Position:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 22;
		add(jLabel5, gridBagConstraints);

		jLabel6.setText("Velocity:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 26;
		add(jLabel6, gridBagConstraints);

		positionText.setText("(0,0,0)");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 24;
		gridBagConstraints.gridwidth = 5;
		add(positionText, gridBagConstraints);

		velocityText.setText("(1,1,1)");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 28;
		gridBagConstraints.gridwidth = 5;
		add(velocityText, gridBagConstraints);
		scaleX.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent e) {
				guiScaleXPropertyChange(e);
				// System.out.println("SCALE CHANGED");
			}
		});

		scaleY.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent e) {
				guiScaleYPropertyChange(e);
			}
		});

		scaleZ.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent e) {
				guiScaleZPropertyChange(e);
			}
		});

		tickX.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent e) {
				guiTickXPropertyChange(e);
			}
		});

		tickY.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent e) {
				guiTickYPropertyChange(e);
			}
		});

		tickZ.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent e) {
				guiTickZPropertyChange(e);
			}
		});

		rotX.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent e) {
				guiRotXPropertyChange(e);
			}
		});

		rotY.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent e) {
				guiRotYPropertyChange(e);
			}
		});

		rotZ.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent e) {
				guiRotZPropertyChange(e);
			}
		});
		choice1.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				choice1PropertyChange(e);
			}
		});

	}// </editor-fold>

	private void guiScaleXPropertyChange(KeyEvent evt) {
		try {
			if (Float.valueOf(scaleX.getText()) != 0) {
				SimulationMain.deltaX = Float.valueOf(scaleX.getText());
			}
		} catch (Exception e) {
			// do nothing
		}
	}

	private void guiScaleYPropertyChange(KeyEvent evt) {
		try {
			if (Float.valueOf(scaleY.getText()) != 0) {
				SimulationMain.deltaY = Float.valueOf(scaleY.getText());
			}
		} catch (Exception e) {
			// do nothing
		}
	}

	private void guiScaleZPropertyChange(KeyEvent evt) {
		try {
			if (Float.valueOf(scaleZ.getText()) != 0) {
				SimulationMain.deltaZ = Float.valueOf(scaleZ.getText());
			}
		} catch (Exception e) {
			// do nothing
		}
	}

	private void guiTickXPropertyChange(KeyEvent evt) {
		try {
			SimulationMain.numOfSegmentsX = Float.valueOf(tickX.getText());
		} catch (Exception e) {
			// do nothing
		}
	}

	private void guiTickYPropertyChange(KeyEvent evt) {
		try {
			SimulationMain.numOfSegmentsY = Float.valueOf(tickY.getText());
		} catch (Exception e) {
			// do nothing
		}
	}

	private void guiTickZPropertyChange(KeyEvent evt) {
		try {
			SimulationMain.numOfSegmentsZ = Float.valueOf(tickZ.getText());
		} catch (Exception e) {
			// do nothing
		}
	}

	private void guiRotXPropertyChange(KeyEvent evt) {
		try {
			SimulationMain.setRotY(Float.valueOf(rotX.getText()));
		} catch (Exception e) {
			// do nothing
		}
	}

	private void guiRotYPropertyChange(KeyEvent evt) {
		try {
			SimulationMain.setRotZ(Float.valueOf(rotY.getText()));
		} catch (Exception e) {
			// do nothing
		}
	}

	private void guiRotZPropertyChange(KeyEvent evt) {
		try {
			SimulationMain.setRotX(Float.valueOf(rotZ.getText()));
		} catch (Exception e) {
			// do nothing
		}
	}

	private void choice1PropertyChange(ItemEvent evt) {
		for (Geometry3D s : spaceObjects) {
			if (s.getName().equals(evt.getItem())) {
				// sim.set
				sim.getChaseCamera().setSpatial(s);
			}
		}
	}

	private void scaleYActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void scaleXActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	float updateSpeed = 0.4f;
	float tpfTot = 0;
	public void update(float tpf) {
		tpfTot += tpf;
		if(tpfTot > updateSpeed) {
		for (Geometry3D s : spaceObjects) {
			if (s.getName().equals(choice1.getSelectedItem())) {
				if(s instanceof SpaceObject) {
					SpaceObject temp = (SpaceObject)s;
					java.awt.EventQueue.invokeLater(new Runnable() {
						public void run() {
							positionText.setText(temp.getToScalePosition().toString() + " km");
							velocityText.setText(temp.getVelocity().toString() + " km/s");
						}
					});
				}
			}
		}
		tpfTot = 0;
		}
	}
	
	// Variables declaration - do not modify
	private java.awt.Choice choice1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel positionText;
	public javax.swing.JTextField rotX;
	public javax.swing.JTextField rotY;
	public javax.swing.JTextField rotZ;
	public javax.swing.JTextField scaleX;
	public javax.swing.JTextField scaleY;
	public javax.swing.JTextField scaleZ;
	public javax.swing.JTextField tickX;
	public javax.swing.JTextField tickY;
	public javax.swing.JTextField tickZ;
	private javax.swing.JLabel velocityText;
	// End of variables declaration
}
